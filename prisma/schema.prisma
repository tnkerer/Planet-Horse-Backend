// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(uuid())
  wallet       String          @unique
  name         String?
  horses       Horse[]
  items        Item[]
  transactions Transaction[]
  chests       Chest[]
  requests     BridgeRequest[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime?       @updatedAt
  phorse       Float           @default(0)
  medals       Int             @default(0)
}

model Nonce {
  id        Int      @id @default(autoincrement())
  address   String
  nonce     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Horse {
  id            String    @id @default(uuid())
  tokenId       String    @unique
  owner         User      @relation(fields: [ownerId], references: [id])
  ownerId       String
  name          String
  sex           Sex
  status        Status
  rarity        String
  exp           Int
  upgradable    Boolean
  level         Int
  basePower     Int
  currentPower  Int
  baseSprint    Int
  currentSprint Int
  baseSpeed     Int
  currentSpeed  Int
  currentEnergy Int
  maxEnergy     Int
  equipments    Item[]
  lastRace      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  @@index([ownerId])
}

model Item {
  id        String    @id @default(uuid())
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   String
  equipedBy Horse?    @relation(fields: [horseId], references: [id])
  horseId   String?
  name      String
  value     Int
  breakable Boolean
  uses      Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Transaction {
  id        String            @id @default(uuid())
  owner     User              @relation(fields: [ownerId], references: [id])
  ownerId   String
  type      TransactionType
  status    TransactionStatus
  value     Float
  note      String?
  txId      String?
  request   BridgeRequest?
  createdAt DateTime          @default(now())
}

model Chest {
  id        String @id @default(uuid())
  owner     User   @relation(fields: [ownerId], references: [id])
  ownerId   String
  chestType Int
  quantity  Int

  @@unique([ownerId, chestType])
}

model BridgeRequest {
  id            String      @id @default(uuid())
  owner         User        @relation(fields: [requesterId], references: [id])
  requesterId   String
  request       Request
  value         Float
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique
  createdAt     DateTime    @default(now())
}

enum Request {
  DEPOSIT
  WITHDRAW
  BURN
  MINT
}

enum Status {
  SLEEP
  IDLE
  BRUISED
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  ITEM
}

enum TransactionStatus {
  FAILED
  PENDING
  PROCESSING // ← new state you’re introducing
  COMPLETED
}

enum Sex {
  MALE
  FEMALE
}

model Meta {
  key   String @id
  value Int
}

model Deposit {
  id          String   @id @default(uuid())
  amount      Decimal  @db.Decimal(78, 18)
  txHash      String   @unique
  blockNumber Int
  from        String
  createdAt   DateTime @default(now())
}
